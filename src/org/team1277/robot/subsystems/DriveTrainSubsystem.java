// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.team1277.robot.subsystems;

import org.team1277.robot.RobotMap;
import org.team1277.robot.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrainSubsystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontLeftMotor = RobotMap.driveTrainLeftMotor;
    SpeedController frontRightMotor = RobotMap.driveTrainRightMotor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private Gyro gyro = RobotMap.gyro;
    
    public GearTooth gearToothLeft = RobotMap.gearToothLeft;
    public GearTooth gearToothRight = RobotMap.gearToothRight;
    
    int sensitivity = 100;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new TankDriveCommand());
    }
    public void tankDrive(double left, double right) {
    	SmartDashboard.putString(" Sensitivity: ", sensitivity + "%");
    	double x = (double) (sensitivity);
    	frontLeftMotor.set((0 - right) * (x / 100));
    	frontRightMotor.set((0 - left) * (x / 100));
    }
    
    public void tankDriveRaw(double left, double right)
    {
    	frontLeftMotor.set(0 - right);
    	frontRightMotor.set(0 - left);
    }
    
    public void lowerSensitivity() {
    	if (sensitivity > 10) {
    		sensitivity = sensitivity - 10;
    	}
    	SmartDashboard.putString(" Sensitivity: ", sensitivity + "%");
    }
    public void raiseSensitivity() {
    	if (sensitivity < 100) {
    		sensitivity = sensitivity + 10;
    	}
    }
    
    public double getAngle()
    {
    	return gyro.getAngle() % 360;
    }
    
    public double getRotationRate()
    {
    	return gyro.getRate();
    }
    
    public void resetGearTooth() {
    	gearToothLeft.reset();
    	gearToothRight.reset();
    }
}